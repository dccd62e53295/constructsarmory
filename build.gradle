buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

version = "1.12.2-1.2.5.10"
group = "c4.conarm"
archivesBaseName = "conarm"

repositories {
    maven {
        name = "CraftTweaker/ContentTweaker"
        url = "http://maven.blamejared.com"
    }
    maven {
        name = "Tinkers/JEI"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "modmaven.k-4u.nl"
    }
    maven {
        name = "CurseForge"
        url = "https://www.cursemaven.com/"
    }
}

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.5.2847"
    runDir = "run"
    useDepAts = true
    mappings = "stable_39"

    replace '@FINGERPRINT@', project.findProperty('signSHA1')
}

dependencies {
    deobfCompile "slimeknights.mantle:Mantle:1.12-1.3.3.55"
    deobfCompile "slimeknights:TConstruct:1.12.2-2.13.0.183"
    compile "curse.maven:tinkerstoolleveling-250957:2630860"

    deobfCompile "CraftTweaker2:CraftTweaker2-API:4.1.20.614"
    deobfCompile "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.20.614"
    deobfCompile "com.teamacronymcoders:ContentTweaker:1.12.2-4.9.1"
    deobfCompile "com.teamacronymcoders.base:base:1.12.2-3.11.0"

    deobfCompile "mezz.jei:jei_1.12.2:4.13.1.225:api"
    runtime "mezz.jei:jei_1.12.2:4.13.1.225"
}

sourceSets {
    main {
        resources {
            srcDirs += 'docs'
        }
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
/*
task signJar(type: SignJar, dependsOn: reobfJar) {

    onlyIf {
        project.hasProperty('keyStore')
    }

    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signJar
*/

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    from (sourceSets.main.output) {
        include 'LICENSE.txt'
    }

    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output

    //manifest commonManifest
    classifier = 'deobf'
}

artifacts {
    archives sourcesJar
    archives deobfJar
}
